each transaction may consist of several individual operations yet as a whole it moves the system between consistent states there are two groups of systems where compensating transaction may be applied 1 in the context of a database this is often easily achieved using transactions and the commit rollback mechanism compensating transaction logic could be implemented as additional on top of database supporting commit rollback in that case we can decrease business transaction granularity 2 for systems without a commit rollback mechanism available one can undo a failed transaction with a compensating transaction which will bring the system back to its initial state typically this is only a workaround which has to be implemented manually and cannot guarantee that the system always ends in a consistent state the system designer may need to consider what happens if the compensating transaction also fails compensating transactions are also used in case where a transaction is long lived commonly called saga transactions for instance in a business process requiring user input in such cases data will be committed to permanent storage but may subsequently need to be rolled back perhaps due to the user opting to cancel the operation unlike conventional rollbacks specific