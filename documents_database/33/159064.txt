every logical operation in a computer takes time to execute and the time can differ based on the input with precise measurements of the time for each operation an attacker can work backwards to the input information can leak from a system through measurement of the time it takes to respond to certain queries how much this information can help an attacker depends on many variables cryptographic system design the cpu running the system the algorithms used assorted implementation details timing attack countermeasures the accuracy of the timing measurements etc timing attacks are often overlooked in the design phase because they are so dependent on the implementation and can be introduced inadvertently with compiler optimizations avoidance of timing attacks involves design of constant time functions and careful testing of the final executable code a timing attack is an example of an attack that exploits the data dependent behavioral characteristics of the implementation of an algorithm rather than other mathematical properties of the algorithm many cryptographic algorithms can be implemented or masked by a proxy in a way that reduces or eliminates data dependent timing information consider an implementation in which every call to a subroutine always returns in exactly x