in a flat array of formula 1 numbers you can either store the elements or the prefix sums in the first case computing prefix sums requires linear time in the second case updating the array elements requires linear time in both cases the other operation can be performed in constant time fenwick trees allow both operations to be performed in formula 2 time this is achieved by representing the numbers as a tree where the value of each node is the sum of the numbers in that subtree the tree structure allows operations to be performed using only formula 2 node accesses given a table of elements it is sometimes desirable to calculate the running total of values up to each index according to some associative binary operation addition on integers being by far the most common fenwick trees provide a method to query the running total at any index in addition to allowing changes to the underlying value table and having all further queries reflect those changes fenwick trees are particularly designed to implement the arithmetic coding algorithm which maintains counts of each symbol produced and needs to convert those to the cumulative probability of a symbol less than