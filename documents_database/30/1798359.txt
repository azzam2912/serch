the second multiply codice 9 then caused the top two values on the stack namely codice 5 and codice 14 to be popped and multiplied and the product codice 15 to be pushed onto the top of the accumulator stack and so on the remaining components of the expression the final operation namely codice 16 returned the value of the expression to storage without changing the status of the accumulator stack assuming that the value on the top of the accumulator stack was not required immediately it would be removed cleared by using the operator codice 17 the following program reads in eight values and forms their sum manipulation of vectors and matrices requires subscript notation in george the subscript s preceded the vector or matrix name thus a j was written codice 18 the following program reads in vector a of 10 values then forms the squares of those values and finally prints those values the above george coding table assisted in transcribing a program onto punch cards conditional operations were written as jumps as follows if a 0 go to 5 which transfers to label 5 if a is greater than zero would be written label 5 was