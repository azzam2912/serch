a signal is an asynchronous notification sent to a process or to a specific thread within the same process in order to notify it of an event that occurred signals originated in 1970s bell labs unix and have been more recently specified in the posix standard when a signal is sent the operating system interrupts the target process normal flow of execution to deliver the signal execution can be interrupted during any non atomic instruction if the process has previously registered a signal handler that routine is executed otherwise the default signal handler is executed embedded programs may find signals useful for interprocess communications as the computational and memory footprint for signals is small signals are similar to interrupts the difference being that interrupts are mediated by the processor and handled by the kernel while signals are mediated by the kernel possibly via system calls and handled by processes the kernel may pass an interrupt as a signal to the process that caused it typical examples are sigsegv sigbus sigill and sigfpe version 1 unix had separate system calls to catch interrupts quits and machine traps version 4 combined all traps into one call and each numbered trap received a