the original exception is saved as a property such as cause of the new exception the idea is that a method should throw exceptions defined at the same abstraction level as the method itself but without discarding information from the lower levels for example a method to play a movie file might handle exceptions in reading the file by re throwing them inside an exception of movie playing the user interface doesn t need to know whether the error occurred during reading chunk of bytes or calling eof it needs only the exception message extracted from cause the user interface layer will have its own set of exceptions the one interested in cause can see its stack trace during debugging or in proper log throwing the right kind of exceptions is particularly enforced by checked exceptions in the java programming language and starting with language version 1 4 almost all exceptions support chaining in runtime engine environments such as java or net there exist tools that attach to the runtime engine and every time that an exception of interest occurs they record debugging information that existed in memory at the time the exception was thrown stack and heap values these