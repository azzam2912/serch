a randomizing function from the integers 1 to n to the integers 1 to n can be used to rearrange the n input items in random order before calling that algorithm this modified randomized algorithm will have small expected running time whatever the input order in theory randomization functions are assumed to be truly random and yield an unpredictably different function every time the algorithm is executed the randomization technique would not work if at every execution of the algorithm the randomization function always performed the same mapping or a mapping entirely determined by some externally observable parameter such as the program s startup time with such a pseudo randomization function one could in principle construct a sequence of calls such that the function would always yield a bad case for the underlying deterministic algorithm for that sequence of calls the average cost would be closer to the worst case cost rather than the average cost for random inputs in practice however the main concern is that some bad cases for the deterministic algorithm may occur in practice much more often than it would be predicted by chance for example in a naive variant of quicksort the worst case is