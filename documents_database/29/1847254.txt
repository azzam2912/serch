its main advantage is that it can be used to write straightforward code that automatically takes full advantage of all the processing power available without programmers needing to be concerned with identifying parallelisms specifying vectorization avoiding race conditions and other challenges of manual directive based programming approaches such as openmp programs written in sequencel can be compiled to multithreaded code that runs in parallel with no explicit indications from a programmer of how or what to parallelize versions of the sequencel compiler generate parallel code in c and opencl which allows it to work with most popular programming languages including c c c fortran java and python a platform specific runtime manages the threads safely automatically providing parallel performance according to the number of cores available currently supporting x86 power8 and arm platforms sequencel was initially developed over a 20 year period starting in 1989 mostly at texas tech university primary funding was from nasa which originally wanted to develop a specification language which was self verifying that is once written the requirements could be executed and the results verified against the desired outcome the principal researcher on the project was initially dr daniel cooke who was soon joined by