a hash table uses a hash function to compute an index also called a hash code into an array of buckets or slots from which the desired value can be found ideally the hash function will assign each key to a unique bucket but most hash table designs employ an imperfect hash function which might cause hash collisions where the hash function generates the same index for more than one key such collisions must be accommodated in some way in a well dimensioned hash table the average cost number of instructions for each lookup is independent of the number of elements stored in the table many hash table designs also allow arbitrary insertions and deletions of key value pairs at amortized constant average cost per operation in many situations hash tables turn out to be on average more efficient than search trees or any other table lookup structure for this reason they are widely used in many kinds of computer software particularly for associative arrays database indexing caches and sets the idea of hashing is to distribute the entries key value pairs across an array of buckets given a key the algorithm computes an index that suggests where the entry