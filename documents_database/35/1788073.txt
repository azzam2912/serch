the development of kinetic data structures was motivated by computational geometry problems involving physical objects in continuous motion such as collision or visibility detection in robotics animation or computer graphics kinetic data structures are used on systems where there is a set of values that are changing as a function of time in a known fashion so the system has some values and for each value formula 2 it is known that formula 3 kinetic data structures allow queries on a system at the current virtual time formula 4 and two additional operations additional operations may be supported for example kinetic data structures are often used with a set of points in this case the structure typically allows points to be inserted and deleted a kinetic data structure allows the values stored in it to change continuously with time in principle this can be approximated by sampling the position of the points at fixed intervals of time and deleting and re inserting each point into a static traditional data structure however such an approach is vulnerable to oversampling or undersampling depending on what interval of time is used and can also be wasteful of computational resources the following general approach