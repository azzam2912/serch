a source to source compiler translates between programming languages that operate at approximately the same level of abstraction while a traditional compiler translates from a higher level programming language to a lower level programming language for example a source to source compiler may perform a translation of a program from python to javascript while a traditional compiler translates from a language like c to assembler or java to bytecode an automatic parallelizing compiler will frequently take in a high level language program as an input and then transform the code and annotate it with parallel code annotations e g openmp or language constructs e g fortran s codice 1 statements another purpose of source to source compiling is translating legacy code to use the next version of the underlying programming language or an api that breaks backward compatibility it will perform automatic code refactoring which is useful when the programs to refactor are outside the control of the original implementer for example converting programs from python 2 to python 3 or converting programs from an old api to the new api or when the size of the program makes it impractical or time consuming to refactor it by hand transcompilers