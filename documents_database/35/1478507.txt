its goals are the paradigm separates the domain model data from use cases context and roles that objects play interaction dci is complementary to model view controller mvc mvc as a pattern language is still used to separate the data and its processing from presentation the data are what the system is the data part of the dci architecture is its relatively static data model with relations the data design is usually coded up as conventional classes that represent the basic domain structure of the system these classes are barely smart data and they explicitly lack the functionality that is peculiar to support of any particular use case these classes commonly encapsulate the physical storage of the data these data implement an information structure that comes from the mental model of end users domain experts programmers and other people in the system they may correspond closely to the model objects of mvc an example of a data object could be a bank account its interface would have basic operations for increasing and decreasing the balance and for inquiring about the current balance the interface would likely not offer operations that involve transactions or which in any way involve other objects