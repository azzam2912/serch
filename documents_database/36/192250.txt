many languages admit both ambiguous and unambiguous grammars while some languages admit only ambiguous grammars any non empty language admits an ambiguous grammar by taking an unambiguous grammar and introducing a duplicate rule or synonym the only language without ambiguous grammars is the empty language a language that only admits ambiguous grammars is called an inherently ambiguous language and there are inherently ambiguous context free languages deterministic context free grammars are always unambiguous and are an important subclass of unambiguous grammars there are non deterministic unambiguous grammars however for computer programming languages the reference grammar is often ambiguous due to issues such as the dangling else problem if present these ambiguities are generally resolved by adding precedence rules or other context sensitive parsing rules so the overall phrase grammar is unambiguous the set of all parse trees for an ambiguous sentence is called a parse forest the simplest example is the following ambiguous grammar for the trivial language which consists of only the empty string meaning that a production can either be itself again or the empty string thus the empty string has leftmost derivations of length 1 2 3 and indeed of any length depending on how many times