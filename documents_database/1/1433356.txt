bounded quantification is an interaction of parametric polymorphism with subtyping bounded quantification has traditionally been studied in the functional setting of system f but is available in modern object oriented languages supporting parametric polymorphism generics such as java c and scala the purpose of bounded quantification is to allow for polymorphic functions to depend on some specific behaviour of objects instead of type inheritance it assumes a record based model for object classes where every class member is a record element and all class members are named functions object attributes are represented as functions that take no argument and return an object the specific behaviour is then some function name along with the types of the arguments and the return type bounded quantification allows to considers all objects with such a function an example would be a polymorphic codice 1 function that considers all objects that are comparable to each other f bounded quantification or recursively bounded quantification introduced in 1989 allows for more precise typing of functions that are applied on recursive types a recursive type is one that includes a function that uses it as a type for some argument or its return value this kind of type