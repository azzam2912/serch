this multi stage process is used because many algorithms for code optimization are easier to apply one at a time or because the input to one optimization relies on the completed processing performed by another optimization this organization also facilitates the creation of a single compiler that can target multiple architectures as only the last of the code generation stages the backend needs to change from target to target for more information on compiler design see compiler the input to the code generator typically consists of a parse tree or an abstract syntax tree the tree is converted into a linear sequence of instructions usually in an intermediate language such as three address code further stages of compilation may or may not be referred to as code generation depending on whether they involve a significant change in the representation of the program for example a peephole optimization pass would not likely be called code generation although a code generator might incorporate a peephole optimization pass in addition to the basic conversion from an intermediate representation into a linear sequence of machine instructions a typical code generator tries to optimize the generated code in some way tasks which are typically part