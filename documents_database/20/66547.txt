among its notable features it introduced nested classes and unified classes with procedures into so called patterns from a technical perspective beta provides several unique features classes and procedures are unified to one concept a pattern also classes are defined as properties attributes of objects this means that a class cannot be instantiated without an explicit object context a consequence of this is that beta supports nested classes classes can be virtually defined much like virtual methods can be in most object oriented programming languages virtual entities such as methods and classes are never overwritten instead they are redefined or specialized beta supports the object oriented perspective on programming and has comprehensive facilities for procedural and functional programming it has powerful abstraction mechanisms to support identification of objects classification and composition beta is a statically typed language like simula eiffel and c with most type checking done at compile time beta aims to achieve an optimal balance between compile time type checking and run time type checking a major and peculiar feature of the language is the concept of patterns in another programming language such as c one would have several classes and procedures beta expresses both of these concepts