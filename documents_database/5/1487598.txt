using this deterministic approach jinx aimed to increase the frequency of occurrence of elusive shared memory bugs sometimes called heisenbugs jinx is no longer available corensic the company that was developing jinx was bought by f5 networks and the jinx project was cancelled jinx worked by dynamically building a set of potential interleavings i e alternate eventualities or execution scenarios that will occur under some future condition that are most likely to result in concurrency faults and quickly tested those execution paths to surface concurrency problems such as deadlocks race conditions and atomicity violations that are found in multiprocessing applications unlike model checkers jinx did not require the specification of a model unlike dynamic and static code analysis methods jinx was notable in that it produced no false positives spurious bug reports this was because jinx tested the scenarios that are likely to be bugs as opposed to just inferring those scenarios by analyzing source code or observing the execution of a program jinx was implemented as a hypervisor giving it the ability to observe the effects of all elements of the software environment on thread interleaving jinx operated independently of any programming language or threading libraries or tools jinx