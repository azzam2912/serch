heap overflows are exploitable in a different manner to that of stack based overflows memory on the heap is dynamically allocated by the application at run time and typically contains program data exploitation is performed by corrupting this data in specific ways to cause the application to overwrite internal structures such as linked list pointers the canonical heap overflow technique overwrites dynamic memory allocation linkage such as malloc meta data and uses the resulting pointer exchange to overwrite a program function pointer a typical example on older versions of linux is two buffers allocated next to each other on the heap writing beyond the boundary of the first buffer allows overwriting meta data in the second buffer by setting the in use bit to zero of the second buffer and setting the length to a small negative value which allows null bytes to be copied when the program calls free on the first buffer it will attempt to merge these two buffers into a single buffer when this happens the buffer that is assumed to be freed will be expected to hold two pointers fd and bk in the first 8 bytes of the formerly allocated buffer bk gets written