a computable addressable object a resource is created in a system as a proxy for a non computable addressable object by means of reification something that was previously implicit unexpressed and possibly inexpressible is explicitly formulated and made available to conceptual logical or computational manipulation informally reification is often referred to as making something a first class citizen within the scope of a particular system some aspect of a system can be reified at language design time which is related to reflection in programming languages it can be applied as a stepwise refinement at system design time reification is one of the most frequently used techniques of conceptual analysis and knowledge representation in the context of programming languages reification is the process by which a user program or any aspect of a programming language that was implicit in the translated program and the run time system are expressed in the language itself this process makes it available to the program which can inspect all these aspects as ordinary data in reflective languages reification data is causally connected to the related reified aspect such that a modification to one of them affects the other therefore the reification data is always a