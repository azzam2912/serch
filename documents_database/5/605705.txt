the function originated in the standard template library stl the specific sorting algorithm is not mandated by the language standard and may vary across implementations but the worst case asymptotic complexity of the function is specified a call to must perform comparisons when applied to a range of elements the function is included from the header of the c standard library and carries three arguments here is a templated type that must be a random access iterator and and must define a sequence of values i e must be reachable from by repeated application of the increment operator to the third argument also of a templated type denotes a comparison predicate this comparison predicate must define a strict weak ordering on the elements of the sequence to be sorted the third argument is optional if not given the less than operator is used which may be overloaded in c this code sample sorts a given array of integers in ascending order and prints it out pointers into the array serve as iterators the same functionality using a container using its and methods to obtain iterators is specified generically so that it can work on any random access container and any