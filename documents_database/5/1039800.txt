it handles cpu resource allocation for executing processes and aims to maximize overall cpu utilization while also maximizing interactive performance con kolivas s work with scheduling most significantly his implementation of fair scheduling named rotating staircase deadline inspired ingo moln r to develop his cfs as a replacement for the earlier o 1 scheduler crediting kolivas in his announcement in contrast to the previous o 1 scheduler used in older linux 2 6 kernels the cfs scheduler implementation is not based on run queues instead a red black tree implements a timeline of future task execution additionally the scheduler uses nanosecond granularity accounting the atomic units by which an individual process share of the cpu was allocated thus making redundant the previous notion of timeslices this precise knowledge also means that no specific heuristics are required to determine the interactivity of a process for example like the old o 1 scheduler cfs uses a concept called sleeper fairness which considers sleeping or waiting tasks equivalent to those on the runqueue this means that interactive tasks which spend most of their time waiting for user input or other events get a comparable share of cpu time when they need it the