data structures used to solve the problem include balanced binary search trees van emde boas trees and fusion trees in the static predecessor problem the set of elements does not change but in the dynamic predecessor problem insertions into and deletions from the set are allowed the predecessor problem is a simple case of the nearest neighbor problem and data structures that solve it have applications in problems like integer sorting the problem consists of maintaining a set which contains a subset of integers each of these integers can be stored with a word size of implying that formula 1 data structures that solve the problem support these operations in addition data structures which solve the dynamic version of the problem also support these operations the problem is typically analyzed in a transdichotomous model of computation such as word ram one simple solution to this problem is to use a balanced binary search tree which achieves in big o notation a running time of formula 2 for predecessor queries the van emde boas tree achieves a query time of formula 3 but requires formula 4 space dan willard proposed an improvement on this space usage with the x fast trie