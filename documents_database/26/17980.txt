the implementation of threads and processes differs between operating systems but in most cases a thread is a component of a process multiple threads can exist within one process executing concurrently and sharing resources such as memory while different processes do not share these resources in particular the threads of a process share its executable code and the values of its dynamically allocated variables and non thread local global variables at any given time systems with a single processor generally implement multithreading by time slicing the central processing unit cpu switches between different software threads this context switching generally happens very often and rapidly enough that users perceive the threads or tasks as running in parallel on a multiprocessor or multi core system multiple threads can execute in parallel with every processor or core executing a separate thread simultaneously on a processor or core with hardware threads separate software threads can also be executed concurrently by separate hardware threads threads made an early appearance under the name of tasks in os 360 multiprogramming with a variable number of tasks mvt in 1967 saltzer 1966 credits victor a vyssotsky with the term thread the process schedulers of many modern operating systems