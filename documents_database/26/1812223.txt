its design and ongoing implementation is described in a blog and on its official website parasail uses a pointer free programming model where objects can grow and shrink and value semantics are used for assignment it has no global garbage collected heap instead region based memory management is used throughout types can be recursive so long as the recursive components are declared optional there are no global variables no parameter aliasing and all subexpressions of an expression can be evaluated in parallel assertions preconditions postconditions class invariants etc are part of the standard syntax using a hoare like notation any possible race conditions are detected at compile time initial design of parasail began in september 2009 by s tucker taft both an interpreter using the parasail virtual machine and an llvm based parasail compiler are available work stealing is used for scheduling parasail s light weight threads the latest version can be downloaded from the parasail website parasail goals the syntax of parasail is similar to modula but with a class and interface based object oriented programming model more similar to java or c more recently the parallel constructs of parasail have been adapted to other syntaxes to produce java