the main purpose of tom was to allow for unplanned reuse of code via a well developed extension mechanism this concept was introduced seemingly by accident in objective c and later proved to be of wide use and was applied aggressively in tom the primary changes in tom are the addition of multiple inheritance tuples as a first class part of the language cleaner syntax free of the c requirements for header files and pre compiler commands and the ability to use categories the re use mechanism to include anything it is this latter ability that represents the whole idea unlike objective c s categories that allowed only new methods to be built onto existing classes tom allowed the addition of class and instance variables new methods even new superclasses this results in the redefinition of class as a class is defined by its main definition and any extensions these extensions have become a first class citizen of the language similarly to ruby the book the pragmatic programmer lists tom as an example for a new language to learn development of the tom language has ceased this is the classic hello world program in tom category object oriented programming languages