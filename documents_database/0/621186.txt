it benefits from the presortedness in the input sequence or a limited amount of disorder for various definitions of measures of disorder and sorts faster adaptive sorting is usually performed by modifying existing sorting algorithms comparison based sorting algorithms have traditionally dealt with achieving an optimal bound of o n log n when dealing with time complexity adaptive sort takes advantage of the existing order of the input to try to achieve better times so that the time taken by the algorithm to sort is a smoothly growing function of the size of the sequence and the disorder in the sequence in other words the more presorted the input is the faster it should be sorted this is an attractive algorithm because nearly sorted sequences are common in practice thus the performance of existing sort algorithms can be improved by taking into account the existing order in the input note that most worst case sorting algorithms that do optimally well in the worst case notably heap sort and merge sort do not take existing order within their input into account although this deficiency is easily rectified in the case of merge sort by checking if the last element of the