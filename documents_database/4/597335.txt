with a simple implementation an adaptive optimizer may simply make a trade off between just in time compilation and interpreting instructions at another level adaptive optimization may take advantage of local data conditions to optimize away branches and to use inline expansion to decrease the cost of procedure calls consider a hypothetical banking application that handles transactions one after another these transactions may be checks deposits and a large number of more obscure transactions when the program executes the actual data may consist of clearing tens of thousands of checks without processing a single deposit and without processing a single check with a fraudulent account number an adaptive optimizer would compile assembly code to optimize for this common case if the system then started processing tens of thousands of deposits instead the adaptive optimizer would recompile the assembly code to optimize the new common case this optimization may include inlining code examples of adaptive optimization include hotspot and hp s dynamo system in some systems notably the java virtual machine execution over a range of bytecode instructions can be provably reversed this allows an adaptive optimizer to make risky assumptions about the code in the above example the optimizer may