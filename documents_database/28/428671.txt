it states all services offered by a module should be available through a uniform notation which does not betray whether they are implemented through storage or through computation this principle applies generally to the syntax of object oriented programming languages in simpler form it states that there should be no syntactical difference between working with an attribute pre computed property or method query of an object while most examples focus on the read aspect of the principle i e retrieving a value meyer shows that the write implications i e modifying a value of the principle are harder to deal with in his monthly column on the eiffel programming language official website the problem being addressed by meyer involves the maintenance of large software projects or software libraries sometimes when developing or maintaining software it is necessary after much code is in place to change a class or object in a way that transforms what was simply an attribute access into a method call programming languages often use different syntax for attribute access and invoking a method e g versus the syntax change would require in popular programming languages of the day changing the source code in all the places