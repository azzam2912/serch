chess engines that continue calculating even when it is not their turn to play end up choosing moves that are stronger than if they are barred from calculating on their opponent s turn the strength of chess programs depends very much on the amount of time allocated for calculating many chess programs use pondering to improve their strength current programs cannot create strategic plans so a program simply tries to predict the opponent s move and begins to calculate its response if the opponent s move has been guessed correctly then the program continues to calculate if the prediction fails the program begins a new computation pondering is less effective than normal thinking for example if the program guesses 25 of the opponent s moves correctly the use of pondering is on average equivalent to increasing the normal calculating time by a factor of 1 25 in chess games between two computers pondering makes sense only if the competing chess engines use separate processors or cores if they share the same core the pondering program steals half of the time from the program thinking in the normal way and uses the stolen time less effectively for this reason chess guis