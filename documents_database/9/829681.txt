two value objects are equal when they have the same value not necessarily being the same object examples of value objects are objects representing an amount of money or a date range being small one can have multiple copies of the same value object that represent the same entity it is often simpler to create a new object rather than rely on a single instance and use references to it value objects should be immutable this is required for the implicit contract that two value objects created equal should remain equal it is also useful for value objects to be immutable as client code cannot put the value object in an invalid state or introduce buggy behaviour after instantiation value objects are among the building blocks of ddd due to the nuances of various object oriented programming languages each has their own methods and patterns for implementing and using value objects in c a class is a reference type while a struct concept derived from the struct in c language is a value type hence an instance derived from a class definition is an object while an instance derived from a struct definition is said to be a value object