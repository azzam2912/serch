such modules are also known as mutually recursive circular dependencies are natural in many domain models where certain objects of the same domain depend on each other however in software design circular dependencies between larger software modules are considered an anti pattern because of their negative effects however such circular or cyclic dependencies have been found to be widespread among the source files of real world software mutually recursive modules are however somewhat common in functional programming where inductive and recursive definitions are often encouraged circular dependencies can cause many unwanted effects in software programs most problematic from a software design point of view is the tight coupling of the mutually dependent modules which reduces or makes impossible the separate re use of a single module circular dependencies can cause a domino effect when a small local change in one module spreads into other modules and has unwanted global effects program errors compile errors circular dependencies can also result in infinite recursions or other unexpected failures circular dependencies may also cause memory leaks by preventing certain very primitive automatic garbage collectors those that use reference counting from deallocating unused objects in very large software designs software engineers may lose the