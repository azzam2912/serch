compared to earlier mechanisms it reduces fragmentation caused by allocations and deallocations the technique is used to retain allocated memory that contains a data object of a certain type for reuse upon subsequent allocations of objects of the same type it is analogous to an object pool but only applies to memory not other resources slab allocation was first introduced in the solaris 2 4 kernel by jeff bonwick it is now widely used by many unix and unix like operating systems including freebsd and linux the primary motivation for slab allocation is that the cost in cpu time of initialization and destruction of kernel data objects can outweigh the cost of allocating memory for them as the kernel creates and deletes objects often overhead costs of initialization can result in significant performance drops object caching leads to less frequent invocation of functions that initialize object state when a slab allocated object is released after use the slab allocation system typically keeps it cached rather than doing the work of destroying it ready for re use next time an object of that type is needed thus avoiding the work of constructing and initialising a new object with slab allocation a