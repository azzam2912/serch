it provides support for encapsulation and data hiding separation of concerns and enhanced code reuse logtalk uses standard prolog syntax with the addition of a few operators and directives the logtalk language implementation is distributed under an open source license and can run using a prolog implementation compliant with official and de facto standards as the back end compiler logtalk aims to bring together the advantages of object oriented programming and logic programming object orientation emphasizes developing discrete reusable units of software while logic programming emphasizes representing the knowledge of each object in a declarative way as an object oriented programming language logtalk s major features include support for both classes with optional metaclasses and prototypes parametric objects protocols interfaces categories components aspects hot patching multiple inheritance public protected private inheritance event driven programming high level multi threading programming reflection and automatic generation of documentation for prolog programmers logtalk provides wide portability featuring predicate namespaces supporting both static and dynamic objects public protected private object predicates coinductive predicates separation between interface and implementation simple and intuitive meta predicate semantics lambda expressions definite clause grammars term expansion mechanism and conditional compilation it also provides a module system based on de facto