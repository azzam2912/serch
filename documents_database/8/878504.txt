this is achieved by reducing the feature set and relying on the serialization library developed at boost the goals of libt2n development are the limitations of the current libt2n implementation libt2n is divided in two parts the code generator does not use an interface description language idl but parses the source code of the server for special tags it produces the code needed to handle the calls on the server and a ready to use library for the client if a remote function is called the client library creates an object describing the call including all parameters this object is serialized using the boost serialization library and transferred to the server currently this can be done using unix domain sockets or tcp the server deserializes the object and calls the corresponding method the result return value or exception is again serialized and sent back to the client t2n is an abbreviation for talk to neighbor