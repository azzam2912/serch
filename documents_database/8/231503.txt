in this model objects are entities that combine state i e data behavior i e procedures or methods and identity unique existence among all other objects the structure and behavior of an object are defined by a class which is a definition or blueprint of all objects of a specific type an object must be explicitly created based on a class and an object thus created is considered to be an instance of that class an object is similar to a structure with the addition of method pointers member access control and an implicit data member which locates instances of the class i e objects of the class in the class hierarchy essential for runtime inheritance features encapsulation prevents users from breaking the invariants of the class which is useful because it allows the implementation of a class of objects to be changed for aspects not exposed in the interface without impact to user code the definitions of encapsulation focus on the grouping and packaging of related information cohesion rather than security issues oop languages do not normally offer formal security restrictions to the internal object state using a method of access is a matter of convention for the interface