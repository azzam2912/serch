it was designed for maclisp by vaughan pratt and subsequently ported to common lisp the notation of cgol is a traditional infix notation in the style of algol rather than lisp s traditional uniformly parenthesized prefix notation syntax the cgol parser is based on pratt s design for top down operator precedence parsing sometimes informally referred to as a pratt parser semantically cgol is essentially just common lisp with some additional reader and printer support special notations are available for many commonly used common lisp operations for example one can write a matrix multiply routine as cgol has an infix codice 1 operation referring to common lisp s codice 2 function and the infix codice 3 operation referring to common lisp s codice 4 function the preceding example corresponds to this text in native common lisp cgol uses codice 5 to read and set properties the preceding example corresponds to this text in native common lisp this illustrates how cgol notates a function of two arguments the preceding example corresponds to this text in native common lisp the syntax of cgol is data driven and so both modifiable and extensible cgol is known to work on armed bear common lisp