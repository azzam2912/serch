a language is homoiconic if a program written in it can be manipulated as data using the language and thus the program s internal representation can be inferred just by reading the program itself for example a lisp program is written as a regular lisp list and can be manipulated by other lisp code in homoiconic languages all code can be accessed and transformed as data using the same representation this property is often summarized by saying that the language treats code as data in a homoiconic language the primary representation of programs is also a data structure in a primitive type of the language itself this makes metaprogramming easier than in a language without this property reflection in the language examining the program s entities at runtime depends on a single homogeneous structure and it does not have to handle several different structures that would appear in a complex syntax as noted above a commonly cited example is the programming language lisp which was created to be easy for list manipulation and where the structure is given by s expressions that take the form of nested lists lisp programs are written in the form of lists the result is