the distinguishing difference between the two forms is the maximum number of concurrent threads that can execute in any given pipeline stage in a given cycle in temporal multithreading the number is one while in simultaneous multithreading the number is greater than one some authors use the term super threading synonymously there are many possible variations of temporal multithreading but most can be classified into two sub forms the main processor pipeline may contain multiple threads with context switches effectively occurring between pipe stages e g in the barrel processor this form of multithreading can be more expensive than the coarse grained forms because execution resources that span multiple pipe stages may have to deal with multiple threads also contributing to cost is the fact that this design cannot be optimized around the concept of a background thread any of the concurrent threads implemented by the hardware might require its state to be read or written on any cycle in any of its forms temporal multithreading is similar in many ways to simultaneous multithreading as in the simultaneous process the hardware must store a complete set of states per concurrent thread implemented the hardware must also preserve the illusion that