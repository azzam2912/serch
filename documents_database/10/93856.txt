if s is a subtype of t the subtyping relation is often written s programming language the type system of a programming language essentially defines its own subtyping relation which may well be trivial should the language support no or very little conversion mechanisms due to the subtyping relation a term may belong to more than one type subtyping is therefore a form of type polymorphism in object oriented programming the term polymorphism is commonly used to refer solely to this subtype polymorphism while the techniques of parametric polymorphism would be considered generic programming functional programming languages often allow the subtyping of records consequently simply typed lambda calculus extended with record types is perhaps the simplest theoretical setting in which a useful notion of subtyping may be defined and studied because the resulting calculus allows terms to have more than one type it is no longer a simple type theory since functional programming languages by definition support function literals which can also be stored in records records types with subtyping provide some of the features of object oriented programming typically functional programming languages also provide some usually restricted form of parametric polymorphism in a theoretical setting it is desirable to