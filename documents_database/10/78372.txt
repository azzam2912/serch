if a value has a unique type a function applied to it can be optimized to update the value in place in the object code such in place updates improve the efficiency of functional languages while maintaining referential transparency unique types can also be used to integrate functional and imperative programming uniqueness typing is best explained using an example consider a function codice 1 that reads the next line of text from a given file now codice 2 reads the next line from the file using an os level system call which has the side effect of changing the current position in the file but this violates referential transparency because calling it multiple times with the same argument will return different results each time as the current position in the file gets moved this in turn makes codice 1 violate referential transparency because it calls codice 2 however using uniqueness typing we can construct a new version of codice 1 that is referentially transparent even though it s built on top of a function that s not referentially transparent the codice 6 declaration specifies that the type of codice 7 is unique that is to say that codice 7 may