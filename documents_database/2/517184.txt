peephole optimization involves changing the small set of instructions to an equivalent set that has better performance for example instead of pushing register a onto the stack and then immediately popping the value back into register a a peephole optimization would remove both instructions instead of adding a to a a peephole optimization might do an arithmetic shift left instead of multiplying a floating point register by 8 a peephole optimization might scale the floating point register s exponent by 3 instead of multiplying an index by 4 adding the result to a base address to get a pointer value and then dereferencing the pointer a peephole optimization may use a hardware addressing mode that accomplishes the same result with one instruction common techniques applied in peephole optimization there can be other types of peephole optimizations the following java bytecode can be replaced by this kind of optimization like most peephole optimizations makes certain assumptions about the efficiency of instructions for instance in this case it is assumed that the codice 1 operation which duplicates and pushes the top of the stack is more efficient than the codice 2 operation which loads a local variable identified as codice 3 and