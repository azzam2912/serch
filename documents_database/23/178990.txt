in theoretical settings and programming languages where functions are defined in curried form such as the simply typed lambda calculus a function type depends on exactly two types the domain a and the range b here a function type is often denoted following mathematical convention or based on there existing exactly exponentially many set theoretic functions mappings a to b in the category of sets the class of such maps or functions is called the exponential object the act of currying makes the function type adjoint to the product type this is explored in detail in the article on currying the function type can be considered to be a special case of the dependent product type which among other properties encompasses the idea of a polymorphic function the syntax used for function types in several programming languages can be summarized including an example type signature for the higher order function composition function when looking at the example type signature of for example c the type of the function is actually codice 2 due to type erasure in c 11 s codice 3 it is more common to use templates for higher order function parameters and type inference codice 4 for