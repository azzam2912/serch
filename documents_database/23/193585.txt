llvm is designed around a language independent intermediate representation that serves as a portable high level assembly language that can be optimized with a variety of transformations over multiple passes llvm is written in c and is designed for compile time link time run time and idle time optimization originally implemented for c and c the language agnostic design of llvm has since spawned a wide variety of front ends languages with compilers that use llvm include actionscript ada c common lisp crystal cuda d delphi dylan fortran graphical g programming language halide haskell java bytecode julia kotlin lua objective c opengl shading language ruby rust scala swift and xojo the llvm project started in 2000 at the university of illinois at urbana champaign under the direction of vikram adve and chris lattner llvm was originally developed as a research infrastructure to investigate dynamic compilation techniques for static and dynamic programming languages llvm was released under the university of illinois ncsa open source license a permissive free software licence in 2005 apple inc hired lattner and formed a team to work on the llvm system for various uses within apple s development systems llvm is an integral part of apple