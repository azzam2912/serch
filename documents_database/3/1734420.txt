verve is verified end to end for type safety and memory safety because of their complexity a holy grail of software verification has been to verify properties of operating systems operating systems are usually written in low level languages such as c that provide very few guarantees the singularity project took the approach of writing an operating system in c a type safe memory safe language a weakness of this approach is that operating systems necessarily need to call lower level code to for instance move the stack pointer verve addresses this problem by partitioning the operating system into verified assembly that is required to be low level and a trusted interface to rest of the operating system written in c there is a trusted specification that guarantees the low level assembly code does not mess with the heap and that the high level c code does not mess with the stacks verve consists of a small nucleus which acts as a minimal hardware abstraction layer and a kernel which uses primitives provided by the nucleus to expose a more traditional interface to applications all components of the system other than the nucleus are written in managed c and compiled