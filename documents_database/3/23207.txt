shared libraries allow common code to be bundled into a wrapper the dll and used by any application software on the system without loading multiple copies into memory a simple example might be the gui text editor which is widely used by many programs by placing this code in a dll all the applications on the system can use it without using more memory this contrasts with static libraries which are functionally similar but copy the code directly into the application in this case every application grows by the size of all the libraries it uses and this can be quite large for modern programs the problem arises when the version of the dll on the computer is different than the version that was used when the program was being created dlls have no built in mechanism for backward compatibility and even minor changes to the dll render its internal structure so different from previous versions that attempting to use them will generally cause the application to crash static libraries avoid this problem because the version that was used to build the application is included inside it so even if a newer version exists elsewhere on the system this does