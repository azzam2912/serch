an expression is called referentially transparent if it can be replaced with its corresponding value without changing the program s behavior this requires that the expression be pure that is to say the expression value must be the same for the same inputs and its evaluation must have no side effects an expression that is not referentially transparent is called referentially opaque in mathematics all function applications are referentially transparent by the definition of what constitutes a mathematical function however this is not always the case in programming where the terms procedure and method are used to avoid misleading connotations in functional programming only referentially transparent functions are considered some programming languages provide means to guarantee referential transparency some functional programming languages enforce referential transparency for all functions the importance of referential transparency is that it allows the programmer and the compiler to reason about program behavior as a rewrite system this can help in proving correctness simplifying an algorithm assisting in modifying code without breaking it or optimizing code by means of memoization common subexpression elimination lazy evaluation or parallelization the concept seems to have originated in alfred north whitehead and bertrand russell s principia mathematica 1910 13 it