pic is commonly used for shared libraries so that the same library code can be loaded in a location in each program address space where it will not overlap any other uses of memory for example other shared libraries pic was also used on older computer systems lacking an mmu so that the operating system could keep applications away from each other even within the single address space of an mmu less system position independent code can be executed at any memory address without modification this differs from absolute code which must be loaded at a specific location to function correctly and load time locatable ltl code in which a linker or program loader modifies a program before execution so it can be run only from a particular memory location generating position independent code is often the default behavior for compilers but they may place restrictions on the use of some language features such as disallowing use of absolute addresses position independent code has to use relative addressing instructions that refer directly to specific memory addresses sometimes execute faster and replacing them with equivalent relative addressing instructions may result in slightly slower execution although modern processors make the difference practically