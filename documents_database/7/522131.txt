this type of node does not hold or reference any data managed by the data structure sentinels are used as an alternative over using null as the path terminator in order to get one or more of the following benefits however sentinel nodes rely on shared memory which requires extra code to avoid data races this causes sentinel nodes to have poor performance on concurrent systems below are two versions of a subroutine implemented in the c programming language for looking up a given search key in a singly linked list the first one uses the sentinel value codice 1 and the second one a pointer to the sentinel node codice 2 as the end of list indicator the declarations of the singly linked list data structure and the outcomes of both subroutines are the same the codice 3 loop contains two tests yellow lines per iteration the globally available pointer codice 6 to the deliberately prepared data structure codice 2 is used as end of list indicator the codice 3 loop contains only one test yellow line per iteration if the data structure is accessed concurrently then for a sentinel based implementation not only the node pointed to by