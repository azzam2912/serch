the variable used in the inner loop switches to the outer loop and vice versa it is often done to ensure that the elements of a multi dimensional array are accessed in the order in which they are present in memory improving locality of reference for example in the code fragment loop interchange would result in on occasion such a transformation may create opportunities to further optimize such as automatic vectorization of the array assignments the major purpose of loop interchange is to take advantage of the cpu cache when accessing array elements when a processor accesses an array element for the first time it will retrieve an entire block of data from memory to cache that block is likely to have many more consecutive elements after the first one so on the next array element access it will be brought directly from cache which is faster than getting it from slow main memory cache misses occur if the contiguously accessed array elements within the loop come from a different cache block and loop interchange can help prevent this the effectiveness of loop interchange depends on and must be considered in light of the cache model used by the underlying