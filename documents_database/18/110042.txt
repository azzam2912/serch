the intent is to eliminate contention among nodes nodes do not share independently access memory or storage one alternative architecture is shared everything in which requests are satisfied by arbitrary combinations of nodes this may introduce contention as multiple nodes may seek to update the same data at the same time sn eliminates single points of failure allowing the overall system to continue operating despite failures in individual nodes and allowing individual nodes to upgrade without a system wide shutdown a sn system can scale simply by adding nodes since no central resource bottlenecks the system another term for sn is sharding a sn system typically partitions its data among many nodes a refinement is to replicate commonly used but infrequently modified data across many nodes allowing more requests to be resolved on a single node michael stonebraker at the university of california berkeley used the term in a 1986 database paper teradata delivered the first sn database system in 1983 tandem computers released nonstop sql a shared nothing database in 1984 shared nothing is popular for web development shared nothing architectures are prevalent for data warehousing applications although requests that require data from multiple nodes can dramatically reduce throughput