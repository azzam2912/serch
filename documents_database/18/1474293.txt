this process was similar to james hoe s original algorithm when atom s author switched careers in late 2007 from logic design to embedded software engineering atom was redesigned from an hdl to a domain specific language targeting hard realtime embedded applications as a result atom s compiler s primary objective changed from maximizing rule concurrency to balancing processing load and minimizing worst case timing latency in september 2008 atom was presented at cufp and in april 2009 was released as open source in its new form atom is a concurrent programming language intended for embedded applications atom features compile time task scheduling and generates code with deterministic execution time and memory consumption simplifying worst case execution time analysis for applications that require hard realtime performance atom s concurrency model is that of guarded atomic actions which eliminates the need for and the problems of using mutex locks by removing run time task scheduling and mutex locking two services traditionally served by an rtos atom can eliminate the need and overhead of an rtos in embedded applications to provide guarantees of deterministic execution time and memory consumption atom places several restrictions on computation first atom designs are always finite state