this approach sometimes seems attractive when the programmer does not fully understand the code and believes that one or more small modifications may result in code that is correct this tactic is not productive when programming by permutation gives little or no assurance about the quality of the code produced it is the polar opposite of formal verification programmers are often compelled to program by permutation when an api is insufficiently documented this lack of clarity drives others to copy and paste from reference code which is assumed to be correct but was itself written as a result of programming by permutation in some cases where the programmer can logically explain that exactly one out of a small set of variations must work programming by permutation leads to correct code which then can be verified and makes it unnecessary to think about the other wrong variations for example the following code sample in c intended to find and copy a series of digits from a larger string has several problems first of all it doesn t give the right answer with the given starting string it produces the output 13 when the correct answer is 123 a programmer who does