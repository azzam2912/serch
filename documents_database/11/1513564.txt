although the application of the service normalization design pattern does help to eliminate this redundancy however just by having a set of normalized services on its own does not guarantee that they would be reused as originally envisaged in case of agnostic services this issue can severely restrict the actual reuse of such services because a project team team a may decide not to reuse an existing service e g it requires data that corresponds to a complex schema and instead develop a lightweight service that just does the job as a result the same reusable logic now exists with two different services whereas the existing service should have been evolved even if it did not contain the most suitable flavor of the functionality this effect gets multiplied when another team team b hoping to find the functionality within the existing service as the boundary of the service does cover the required functionality fails to find it and instead start using the newly created service by team a consequently the actual reusability of the original agnostic service drops and at the same time creates governance problem as far as the maintenance of the original and new services is concerned because