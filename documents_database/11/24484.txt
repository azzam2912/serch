defensive programming practices are often used where high availability safety or security is needed defensive programming is an approach to improve software and source code in terms of overly defensive programming however may safeguard against errors that will never be encountered thus incurring run time and maintenance costs there is also the risk that the code traps or prevents too many exceptions potentially resulting in unnoticed incorrect results secure programming is the subset of defensive programming concerned with computer security that is to say security is the concern not necessarily safety or availability the software may be allowed to fail in certain ways as with all kinds of defensive programming avoiding bugs is a primary objective however the motivation is not as much to reduce the likelihood of failure in normal operation as if safety was the concern but to reduce the attack surface the programmer must assume that the software might be misused actively to reveal bugs and that bugs could be exploited maliciously the function will result in undefined behavior when the input is over 1000 characters some novice programmers may not feel that this is a problem supposing that no user will enter such a long input