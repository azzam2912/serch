function objects are often called functors a typical use of a function object is in writing callback functions a callback in procedural languages such as c may be performed by using function pointers however it can be difficult or awkward to pass a state into or out of the callback function this restriction also inhibits more dynamic behavior of the function a function object solves those problems since the function is really a fa ade for a full object carrying its own state many modern and some older languages e g c eiffel groovy lisp smalltalk perl php python ruby scala and many others support first class function objects and may even make significant use of them functional programming languages additionally support closures i e first class functions that can close over variables in their surrounding environment at creation time during compilation a transformation known as lambda lifting converts the closures into function objects consider the example of a sorting routine that uses a callback function to define an ordering relation between a pair of items a c program using function pointers may appear as in c a function object may be used instead of an ordinary function by defining