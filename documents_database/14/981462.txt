friedman mitchell wand and christopher t haynes eopl surveys the principles of programming languages from an operational perspective it starts with an interpreter in scheme for a simple functional core language similar to the lambda calculus and then systematically adds constructs for each addition for example variable assignment or thread like control the book illustrates an increase in expressive power of the programming language and a demand for new constructs for the formulation of a direct interpreter the book also demonstrates that systematic transformations say store passing style or continuation passing style can eliminate certain constructs from the language in which the interpreter is formulated the second part of the book is dedicated to a systematic translation of the interpreter s into register machines the transformations show how to eliminate higher order closures continuation objects recursive function calls and more at the end the reader is left with an interpreter that uses nothing but tail recursive function calls and assignment statements plus conditionals it becomes trivial to translate this code into a c program or even an assembly program as a bonus the book shows how to pre compute certain pieces of meaning and how to generate a representation of