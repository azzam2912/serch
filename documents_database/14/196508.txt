this was historically needed to synchronize critical sections of kernel code that shouldn t be interrupted newer unix variants which support symmetric multiprocessing now mostly use mutexes for this purpose which is a more general solution so multiple processors can execute kernel code at the same time on older pdp 11 versions of unix there were eight of these routines ranging from codice 1 to codice 2 each corresponding to one pdp 11 interrupt priority level in addition to codice 3 which restores a previous priority level returned by one of the other routines on bsd unix and its derivatives these are called codice 4 codice 5 codice 6 codice 7 codice 8 codice 9 codice 10 codice 11 codice 12 codice 13 codice 14 codice 15 codice 16 codice 1 and codice 3 the spl family of primitives is still heavily used in openbsd and netbsd which is evidenced by the plentiful of calls to codice 19 within the networking code whereas freebsd and dragonfly bsd use more modern concepts for example in dragonfly lwkt tokens may be used in place of spl