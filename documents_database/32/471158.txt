for instance in first order abstract syntax foas trees as commonly used in compilers the tree structure implies the subexpression relation meaning that no parentheses are required to disambiguate programs as they are in the concrete syntax hoas exposes additional structure the relationship between variables and their binding sites in foas representations a variable is typically represented with an identifier with the relation between binding site and use being indicated by using the same identifier with hoas there is no name for the variable each use of the variable refers directly to the binding site there are a number of reasons why this technique is useful first it makes the binding structure of a program explicit just as there is no need to explain operator precedence in a foas representation there is no need to have the rules of binding and scope at hand to interpret a hoas representation second programs that are alpha equivalent differing only in the names of bound variables have identical representations in hoas which can make equivalence checking more efficient one mathematical object that could be used to implement hoas is a graph where variables are associated with their binding sites via edges another popular