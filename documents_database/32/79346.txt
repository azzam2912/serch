locking occurs only if the locking criterion check indicates that locking is required the pattern when implemented in some language hardware combinations can be unsafe at times it can be considered an anti pattern it is typically used to reduce locking overhead when implementing lazy initialization in a multi threaded environment especially as part of the singleton pattern lazy initialization avoids initializing a value until the first time it is accessed for the singleton pattern double checked locking is not needed singleton getinstance if one wished to use the double checked idiom instead of the trivially working example above for instance because visual studio before the 2015 release did not implement the c 11 standard s language about concurrent initialization quoted above one needs to use acquire and release fences class singleton singleton singleton getinstance package main import sync var arrmu sync mutex var arr int getarr retrieves arr lazily initializing if needed double checked locking avoids locking the entire function and ensures that arr will be initialized only once func getarr int func main consider for example this code segment in the java programming language as given by as well as all other java code segments single threaded version