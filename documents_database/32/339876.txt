a numeric variable is signed if it can represent both positive and negative numbers and unsigned if it can only represent non negative numbers zero or positive numbers as signed numbers can represent negative numbers they lose a range of positive numbers that can only be represented with unsigned numbers of the same size in bits because roughly half the possible values are non positive values whereas the respective unsigned type can dedicate all the possible values to the positive number range for example a two s complement signed 16 bit integer can hold the values 32768 to 32767 inclusively while an unsigned 16 bit integer can hold the values 0 to 65535 for this sign representation method the leftmost bit most significant bit denotes whether the value is positive or negative 0 for positive 1 for negative for most architectures there is no signed unsigned type distinction in the machine language nevertheless arithmetic instructions usually set different cpu flags such as the carry flag for unsigned arithmetic and the overflow flag for signed those values can be taken into account by subsequent branch or arithmetic commands the c programming language along with its derivatives implements a signedness for all