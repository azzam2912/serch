this allows defining functions with a more advanced type behaviour for a data constructor of haskell 2010 the return value has the type instantiation implied by the instantiation of the adt parameters at the constructor s application a parametric adt that is not a gadt data list a nil cons a list a integers cons 12 cons 107 nil the type of integers is list int strings cons boat cons dock nil the type of strings is list string a gadt data expr a where eval expr a a eval e case e of expr1 eequal eint 2 eint 3 the type of expr1 is expr bool ret eval expr1 ret is false they are currently implemented in the ghc compiler as a non standard extension used by among others pugs and darcs ocaml supports gadt natively since version 4 00 the ghc implementation provides support for existentially quantified type parameters and for local constraints an early version of generalized algebraic data types were described by and based on pattern matching in alf generalized algebraic data types were introduced independently by and prior by as extensions to ml s and haskell s algebraic data types both are essentially equivalent to