key features include the ability to choose which changes to accept from other repositories interaction with either other local on disk repositories or remote repositories via ssh http or email and an unusually interactive interface the developers also emphasize the use of advanced software tools for verifying correctness the expressive type system of the functional programming language haskell enforces some properties and randomized testing via quickcheck verifies many others the name is a recursive acronym for darcs advanced revision control system darcs treats patches as first class citizens for the user a repository can be seen as a set of patches where each patch is not necessarily ordered with respect to other patches i e the set of patches is only a partially ordered set in many cases patches can be independently transmitted between various repositories many branching merging and cherry picking operations that would require additional commands with snapshot based systems like git or mercurial can be directly done with darcs with the usual pull and push commands in terms of user interface this means that darcs has fewer commands these commands are more interactive one can choose more precisely which patches they want to exchange with remote repositories