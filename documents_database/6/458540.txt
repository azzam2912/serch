that formula 2 is assumed not to hold from failure to derive formula 2 note that formula 4 can be different from the statement formula 5 of the logical negation of formula 2 depending on the completeness of the inference algorithm and thus also on the formal logic system negation as failure has been an important feature of logic programming since the earliest days of both planner and prolog in prolog it is usually implemented using prolog s extralogical constructs in planner negation as failure could be implemented as follows which says that if an exhaustive search to prove p fails then assert p note that the above example uses true mathematical negation which cannot be expressed in prolog in pure prolog naf literals of the form formula 1 can occur in the body of clauses and can be used to derive other naf literals for example given only the four clauses naf derives formula 12 formula 13 and formula 2 the semantics of naf remained an open issue until keith clark 1978 showed that it is correct with respect to the completion of the logic program where loosely speaking only and formula 15 are interpreted as if and only