this contrasts with data structures which are concrete representations of data and are the point of view of an implementer not a user formally an adt may be defined as a class of objects whose logical behavior is defined by a set of values and a set of operations this is analogous to an algebraic structure in mathematics what is meant by behavior varies by author with the two main types of formal specifications for behavior being axiomatic algebraic specification and an abstract model these correspond to axiomatic semantics and operational semantics of an abstract machine respectively some authors also include the computational complexity cost both in terms of time for computing operations and space for representing values in practice many common data types are not adts as the abstraction is not perfect and users must be aware of issues like arithmetic overflow that are due to the representation for example integers are often stored as fixed width values 32 bit or 64 bit binary numbers and thus experience integer overflow if the maximum value is exceeded adts are a theoretical concept in computer science used in the design and analysis of algorithms data structures and software systems and do