sax provides a mechanism for reading data from an xml document that is an alternative to that provided by the document object model dom where the dom operates on the document as a whole i e building the full ast of an xml document for convenience of the user sax parsers operate on each piece of the xml document sequentially issuing parsing events while making a single pass through the input stream unlike dom there is no formal specification for sax the java implementation of sax is considered to be normative sax processes documents state independently in contrast to dom which is used for state dependent processing of xml documents a sax parser only needs to report each parsing event as it happens and normally discards almost all of that information once reported it does however keep some things for example a list of all elements that have not been closed yet in order to catch later errors such as end tags in the wrong order thus the minimum memory required for a sax parser is proportional to the maximum depth of the xml file i e of the xml tree and the maximum data involved in a single xml