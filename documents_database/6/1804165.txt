a concise rule for determining whether phase distinction is preserved in a language or not has been proposed by luca cardelli if a is a compile time term and b is a subterm of a then b must also be a compile time term most statically typed languages conform to the principle of phase distinction however some languages with especially flexible and expressive type systems notably dependently typed programming languages allow types to be manipulated in the same ways as regular terms they may be passed to functions or returned as results a language with phase distinction may have separate namespaces for types and run time variables in an optimizing compiler phase distinction marks the boundary between expressions which are safe to erase phase distinction is used in conjunction with static checking by using a calculus based system phase distinction removes the need to enforce linear logic between different types and terms of programming phase distinction distinguishes between processing to be done at compile time versus processing done at runtime consider a simple language with terms and types note how types and terms are distinct at compile time types are used to verify the validity of the terms however types