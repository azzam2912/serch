the purpose of the pattern is to achieve a high degree of flexibility between components in a strongly typed language where new properties can be added to the object tree on the fly without losing the support of type safety the pattern makes use of traits to separate different properties of a class into different interfaces the term document is inspired from document oriented databases a document is an object that contains a number of properties a property can for an example be a value like a number or a string or it can be a list of other documents every property is referenced using a key when traversing the document tree the user specifies a constructor to be used for creating the implementation class of the next level the implementations are often a union of various traits that extend the document interface making it possible for them to handle setting and getting properties on their own the interface document states that properties can be edited using the put method read using the get method and sub documents can be traversed using the children method the children method requires a functional reference to a method that can produce a typed