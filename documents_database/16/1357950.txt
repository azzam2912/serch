it is defined by the posix 1 standard the base of the single unix specification and should therefore be available in any conforming or quasi conforming operating system compiler all official versions of unix including macos linux etc on unix like systems the interface defined by codice 1 is typically made up largely of system call wrapper functions such as codice 3 codice 4 and i o primitives codice 5 codice 6 codice 7 etc unix compatibility layers such as cygwin and mingw also provide their own versions of unistd h in fact those systems provide it along with the translation libraries that implement its functions in terms of win32 functions e g in cygwin a header file can be found in codice 8 that sub includes a file of the same name in codice 9 not everything is defined in there but some definitions are done by references to the gnu c standard library headers like stddef h which provide the type size t and many more thus unistd h is only a generically defined adaptive layer that might be based upon already existing system and compiler specific definitions this has the general advantage of not having a possibly