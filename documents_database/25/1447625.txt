the technique was first described by john c reynolds in his 1972 paper definitional interpreters for higher order programming languages reynolds observation was that a given program contains only finitely many function abstractions so that each can be assigned and replaced by a unique identifier every function application within the program is then replaced by a call to the apply function with the function identifier as the first argument the apply function s only job is to dispatch on this first argument and then perform the instructions denoted by the function identifier on the remaining arguments one complication to this basic idea is that function abstractions may reference free variables in such situations defunctionalization must be preceded by closure conversion lambda lifting so that any free variables of a function abstraction are passed as extra arguments to apply in addition if closures are supported as first class values it becomes necessary to represent these captured bindings by creating data structures instead of having a single apply function dispatch on all function abstractions in a program various kinds of control flow analysis including simple distinctions based on arity or type signature can be employed to determine which function s may be