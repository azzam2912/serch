he says in an anemic domain design business logic is typically implemented in separate classes which transform the state of the domain objects fowler calls such external classes transaction scripts this pattern is a common approach in java applications possibly encouraged by technologies such as early versions of ejb s entity beans as well as in net applications following the three layered services application architecture where such objects fall into the category of business entities although business entities can also contain behavior fowler describes the transaction script pattern thus in his book patterns of enterprise application architecture fowler noted that the transaction script pattern is ok for many simple business applications and obviates a complex oo database mapping layer reasons why this may occur anemicdomainmodel may occur in systems that are influenced from service oriented architectures where behaviour does not or tends to not travel architectures like com and remoting allow behaviour but increasingly the web has favoured disconnected and stateless architectures there is some criticism as to whether this software design pattern should be considered an anti pattern since many see also benefits in it for example anemic non anemic